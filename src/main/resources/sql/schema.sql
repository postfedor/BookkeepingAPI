DROP SCHEMA IF EXISTS bookkeeping CASCADE;
CREATE SCHEMA IF NOT EXISTS bookkeeping;

CREATE TABLE bookkeeping.adformat
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by BIGINT,
    updated_by BIGINT,
    created_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    name       VARCHAR(255),
    local_name VARCHAR(255),
    CONSTRAINT pk_adformat PRIMARY KEY (id)
);

CREATE TABLE bookkeeping.channel
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by  BIGINT,
    updated_by  BIGINT,
    created_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    short_name  VARCHAR(32),
    full_name   VARCHAR(255),
    tg_username VARCHAR(32),
    owner_id    BIGINT                                  NOT NULL,
    CONSTRAINT pk_channel PRIMARY KEY (id)
);

CREATE TABLE bookkeeping.customer
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by  BIGINT,
    updated_by  BIGINT,
    created_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    name        VARCHAR(40),
    tg_username VARCHAR(32),
    CONSTRAINT pk_customer PRIMARY KEY (id)
);

CREATE TABLE bookkeeping.payment_status
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by BIGINT,
    updated_by BIGINT,
    created_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    name       VARCHAR(255),
    CONSTRAINT pk_payment_status PRIMARY KEY (id)
);

ALTER TABLE bookkeeping.payment_status
    ADD CONSTRAINT uc_payment_status_name UNIQUE (name);

CREATE TABLE bookkeeping.purchase
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by  BIGINT,
    updated_by  BIGINT,
    created_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    date_time   TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    format_id   BIGINT                                  NOT NULL,
    customer_id BIGINT                                  NOT NULL,
    price       BIGINT                                  NOT NULL,
    status_id   BIGINT                                  NOT NULL,
    channel_id  BIGINT                                  NOT NULL,
    CONSTRAINT pk_purchase PRIMARY KEY (id)
);

ALTER TABLE bookkeeping.purchase
    ADD CONSTRAINT FK_PURCHASE_ON_CHANNEL FOREIGN KEY (channel_id) REFERENCES bookkeeping.channel (id);

ALTER TABLE bookkeeping.purchase
    ADD CONSTRAINT FK_PURCHASE_ON_CUSTOMER FOREIGN KEY (customer_id) REFERENCES bookkeeping.customer (id);

ALTER TABLE bookkeeping.purchase
    ADD CONSTRAINT FK_PURCHASE_ON_FORMAT FOREIGN KEY (format_id) REFERENCES bookkeeping.adformat (id);

ALTER TABLE bookkeeping.purchase
    ADD CONSTRAINT FK_PURCHASE_ON_STATUS FOREIGN KEY (status_id) REFERENCES bookkeeping.payment_status (id);

CREATE TABLE bookkeeping.sale
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_by  BIGINT,
    updated_by  BIGINT,
    created_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at  TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    date_time   TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    format_id   BIGINT                                  NOT NULL,
    customer_id BIGINT                                  NOT NULL,
    price       BIGINT                                  NOT NULL,
    status_id   BIGINT                                  NOT NULL,
    channel_id  BIGINT                                  NOT NULL,
    CONSTRAINT pk_sale PRIMARY KEY (id)
);

ALTER TABLE bookkeeping.sale
    ADD CONSTRAINT FK_SALE_ON_CHANNEL FOREIGN KEY (channel_id) REFERENCES bookkeeping.channel (id);

ALTER TABLE bookkeeping.sale
    ADD CONSTRAINT FK_SALE_ON_CUSTOMER FOREIGN KEY (customer_id) REFERENCES bookkeeping.customer (id);

ALTER TABLE bookkeeping.sale
    ADD CONSTRAINT FK_SALE_ON_FORMAT FOREIGN KEY (format_id) REFERENCES bookkeeping.adformat (id);

ALTER TABLE bookkeeping.sale
    ADD CONSTRAINT FK_SALE_ON_STATUS FOREIGN KEY (status_id) REFERENCES bookkeeping.payment_status (id);

CREATE TABLE bookkeeping."user"
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    updated_at TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    username   VARCHAR(25),
    password   VARCHAR(100),
    first_name VARCHAR(40),
    last_name  VARCHAR(40),
    email      VARCHAR(40),
    CONSTRAINT pk_user PRIMARY KEY (id)
);

CREATE TABLE bookkeeping.role
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_role PRIMARY KEY (id)
);

ALTER TABLE bookkeeping.role
    ADD CONSTRAINT uc_role_name UNIQUE (name);

CREATE TABLE bookkeeping.user_role
(
    role_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL
);

ALTER TABLE bookkeeping."user"
    ADD CONSTRAINT uc_unqiue_username UNIQUE (username);

ALTER TABLE bookkeeping."user"
    ADD CONSTRAINT uc_unqiue_email UNIQUE (email);

ALTER TABLE bookkeeping.user_role
    ADD CONSTRAINT fk_user_role_on_role FOREIGN KEY (role_id) REFERENCES bookkeeping.role (id);

ALTER TABLE bookkeeping.user_role
    ADD CONSTRAINT fk_user_role_on_user FOREIGN KEY (user_id) REFERENCES bookkeeping."user" (id);

ALTER TABLE bookkeeping.channel
    ADD CONSTRAINT FK_CHANNEL_ON_OWNER FOREIGN KEY (owner_id) REFERENCES bookkeeping."user" (id);